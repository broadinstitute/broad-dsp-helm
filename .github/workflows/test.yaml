---
name: Helm Chart Test
env:
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/jade-account.json
  GOOGLE_CLOUD_PROJECT: broad-jade-integration
  K8_CLUSTER: integration-master
  GOOGLE_ZONE: us-central1
  NAMESPACE: integration-temp

on: pull_request

jobs:
  test:
    if: github.event.label.name != 'automerge'
#    if: "!contains( github.event.pull_request.labels.*.name, 'automerge')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: add helm repo for umbrella
        run: |
          helm repo add datarepo-helm https://broadinstitute.github.io/datarepo-helm
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add elastic https://helm.elastic.co
          helm repo add terra-helm https://terra-helm.storage.googleapis.com
          helm repo update

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      - id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Whitelist Runner ip
        id: ips
        run: |
          gcloud config set project ${{ env.GOOGLE_CLOUD_PROJECT }}
          CUR_IPS=$(gcloud container clusters describe ${{ env.K8_CLUSTER }} --zone ${{ env.GOOGLE_ZONE }} --format json | \
            jq -r '[.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock]')
          RUNNER_IP=$(curl 'https://api.ipify.org/?format=text' | xargs printf '[ "%s/32" ]')
          NEW_IPS=$(printf '%s\n' $CUR_IPS $RUNNER_IP | jq -s -r 'add | unique | join(",")')

          for i in {1..5}; do
            if gcloud container clusters update ${{ env.K8_CLUSTER }} \
              --zone ${{ env.GOOGLE_ZONE }} \
              --enable-master-authorized-networks \
              --master-authorized-networks $NEW_IPS; then
                echo "Successful whitelist"
                break
            else
              echo "Failed to whitelist - Retrying"
              sleep 15
              if [ i == 5 ]; then
                echo "Failed to whitelist - Terminating"
                exit 1
              fi
            fi
          done

      - name: Use gcloud CLI
        if: success()
        run: |
          gcloud container clusters get-credentials ${{ env.K8_CLUSTER }} --zone ${{ env.GOOGLE_ZONE }}
          gcloud info

      - name: supporting postgres chart
        timeout-minutes: 3
        run: |
          helm upgrade test bitnami/postgresql -f .github/postgres-values.yaml --install -n ${{ env.NAMESPACE }} --create-namespace --version 10.16.1
          while [[ $(kubectl get pods -l app.kubernetes.io/name=postgresql -n ${{ env.NAMESPACE }} -o \
            'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done

      - name: Run chart-testing (test)
        id: test
        if: success()
        run: ct install --debug --print-config --config .github/test-config.yaml --namespace ${{ env.NAMESPACE }}

      - name: delete supporting postgres chart
        if: always()
        run: |
          helm delete test -n ${{ env.NAMESPACE }}
          kubectl delete pvc -n ${{ env.NAMESPACE }} --all
          kubectl delete namespace ${{ env.NAMESPACE }}

      - name: clean whitelist
        if: always()
        run: |
          CUR_IPS=$(gcloud container clusters describe ${{ env.K8_CLUSTER }} --zone ${{ env.GOOGLE_ZONE }} --format json | \
            jq -r '[.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock]')
          RUNNER_IP=$(curl 'https://api.ipify.org/?format=text' | xargs printf '[ "%s/32" ]')
          RUNNER_IP=$(echo ${RUNNER_IP}| jq -r '.[0]')
          RESTORE_IPS=$(printf '%s\n' $CUR_IPS | jq -r --arg RUNNER_IP "$RUNNER_IP" '. - [ $RUNNER_IP ] | unique | join(",")')

          gcloud container clusters update ${{ env.K8_CLUSTER }} \
            --zone ${{ env.GOOGLE_ZONE }} \
            --enable-master-authorized-networks \
            --master-authorized-networks ${RESTORE_IPS}
