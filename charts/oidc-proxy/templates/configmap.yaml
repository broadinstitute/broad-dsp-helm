apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "oidc-proxy.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "oidc-proxy.labels" . | nindent 4 }}
data:
  siteconf: |-
    ServerAdmin ${SERVER_ADMIN}
    ServerName ${SERVER_NAME}
    ServerTokens ProductOnly
    TraceEnable off

    LogFormat "%h %l %u \"%{OAUTH2_CLAIM_email}i\" \"%{X-App-ID}i\" [%{%FT%T}t.%{msec_frac}t%{%z}t] %D %X \"%r\" %>s %b \"%{Referer}i\" \"%{Origin}i\" \"%{User-Agent}i\"" combined
    LogFormat "%{X-Forwarded-For}i %l %u \"%{OAUTH2_CLAIM_email}i\" \"%{X-App-ID}i\" [%{%FT%T}t.%{msec_frac}t%{%z}t] %D %X \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy
    SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
    CustomLog "/dev/stdout" combined env=!forwarded
    CustomLog "/dev/stdout" proxy env=forwarded
    LogLevel ${LOG_LEVEL}
    
    AddType application/x-httpd-php .php

    Header unset X-Frame-Options
    Header always set X-Frame-Options SAMEORIGIN
    Header always set Access-Control-Allow-Headers DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Referer,X-App-Id,Origin
    Header always set Access-Control-Allow-Methods GET,POST,DELETE,PUT,PATCH,OPTIONS,HEAD
    Header always set X-Content-Type-Options nosniff
    Header always set Strict-Transport-Security max-age=31536000;includeSubDomains
    Header always set Cache-Control no-cache,no-store,must-revalidate

    # If CORS_REGEX environment variable is set, match the domains in the regex
    # to set the Access-Control-Allow-Origin. Domains not in the regex will be
    # denied.
    <If "-n osenv('CORS_REGEX')">
        SetEnvIf Origin "${CORS_REGEX}" ORIGIN_SUB_DOMAIN=$0
    </If>
    # If no CORS_REGEX environment variable is set, echo the Origin domain back
    # in the Access-Control-Allow-Origin header.
    <Else>
        SetEnvIf Origin "(.+)" ORIGIN_SUB_DOMAIN=$0
    </Else>
    # CORS header will ONLY be set if the Origin header was sent. The browser
    # does NOT set the Origin header on GETs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
    # Due to this change Access-Control-Allow-Origin '*' is never set.
    Header always set Access-Control-Allow-Origin %{ORIGIN_SUB_DOMAIN}e env=ORIGIN_SUB_DOMAIN
    Header merge Vary Origin

    ProxyTimeout ${PROXY_TIMEOUT}
    OIDCOAuthTokenIntrospectionInterval 60
    # Enabling cache encryption via 'OIDCCacheEncrypt On' has two side effects:
    # 1. it reduces key size to avoid "could not construct cache key since key size is too large" cache errors
    # 2. it causes intermittent duplicate requests between the proxy and the underlying app
    # the latter side effect is too dangerous, so cache encryption is off
    OIDCCacheEncrypt Off
    # Use GET for the introspection endpoint to avoid a performance issue with POST requests.
    # See https://broadworkbench.atlassian.net/browse/PROD-634
    OIDCOAuthIntrospectionEndpointMethod GET

    <VirtualHost _default_:${HTTPD_PORT}>
        ServerAdmin ${SERVER_ADMIN}
        ServerName ${SERVER_NAME}
        ErrorLog /dev/stdout
        CustomLog "/dev/stdout" combined
        RewriteEngine On
        RewriteCond  %{HTTP:X-Forwarded-Proto} !https
        RewriteCond %{REQUEST_URI}  !^/(version|status) [NC]
        SSLProxyEngine on

        ErrorLog /dev/stdout
        CustomLog "/dev/stdout" combined

        DocumentRoot /app
        
        <Directory "/app">
          AllowOverride All
          Options -Indexes
          
          Order allow,deny
          Allow from all
        </Directory>

        <Location /introspect/>
            RewriteEngine off
            Require all granted
            AuthType None
        </Location>
    
        <LocationMatch "^(?!/introspect/)(${PROXY_PATH})(.*)">
            RewriteEngine On
            RewriteCond %{REQUEST_METHOD} OPTIONS
            RewriteRule ^(.*)$ $1 [R=204,L]

            <Limit OPTIONS>
                Require all granted
            </Limit>

            ${AUTH_TYPE}
            ${AUTH_REQUIRE}

            ProxyPassMatch ${PROXY_URL}$2
            ProxyPassReverse ${PROXY_URL}

            ${FILTER}
        </LocationMatch>

        <Location ${PROXY_PATH2}>
            RewriteEngine On
            RewriteCond %{REQUEST_METHOD} OPTIONS
            RewriteRule ^(.*)$ $1 [R=204,L]

            <Limit OPTIONS>
                Require all granted
            </Limit>

            ${AUTH_TYPE2}
            <RequireAll>
              <RequireAll>
                ${AUTH_REQUIRE2}
              </RequireAll>
              <RequireAll>
                # Note: we need to reference %{REMOTE_USER} to ensure that this expression is evaluated _after_ the authentication has happened
                # %{REMOTE_USER} != %{REMOTE_USER} will never evaluate to true but will ensure that the expression is evaluated at the correct time
                # An example expression can look like:
                # Require expr "%{REMOTE_USER} != %{REMOTE_USER} || %{HTTP:OAUTH2_CLAIM_email} =~ /.gserviceaccount.com$/"
                Require expr "%{REMOTE_USER} != %{REMOTE_USER} || ('${ENVIRONMENT}' in {'dev', 'alpha', 'perf', 'staging', 'prod'} && (${ALLOW_EXPRESSION}))"
              </RequireAll>
            </RequireAll>


            RequestHeader set oidc_claim_email "expr=%{HTTP:OAUTH2_CLAIM_email}"
            RequestHeader set oidc_claim_user_id "expr=%{HTTP:OAUTH2_CLAIM_sub}"
            RequestHeader set oidc_access_token "expr=%{HTTP:OAUTH2_CLAIM_access_token}"
            RequestHeader set oidc_claim_expires_in "expr=%{HTTP:OAUTH2_CLAIM_exp}"

            ProxyPass ${PROXY_URL2}
            ProxyPassReverse ${PROXY_URL2}

            ${FILTER2}
        </Location>

        <Location ${PROXY_PATH3}>
            RewriteEngine On
            RewriteCond %{REQUEST_METHOD} OPTIONS
            RewriteRule ^(.*)$ $1 [R=204,L]

            <Limit OPTIONS>
                Require all granted
            </Limit>

            ${AUTH_TYPE3}
            <RequireAll>
              <RequireAll>
                ${AUTH_REQUIRE3}
              </RequireAll>
              <RequireAll>
                # Note: we need to reference %{REMOTE_USER} to ensure that this expression is evaluated _after_ the authentication has happened
                # %{REMOTE_USER} != %{REMOTE_USER} will never evaluate to true but will ensure that the expression is evaluated at the correct time
                # An example expression can look like:
                # Require expr "%{REMOTE_USER} != %{REMOTE_USER} || %{HTTP:OAUTH2_CLAIM_email} =~ /.gserviceaccount.com$/"
                Require expr "%{REMOTE_USER} != %{REMOTE_USER} || ('${ENVIRONMENT}' in {'dev', 'alpha', 'perf', 'staging', 'prod'} && (${ALLOW_EXPRESSION}))"
              </RequireAll>
            </RequireAll>

            RequestHeader set oidc_claim_email "expr=%{HTTP:OAUTH2_CLAIM_email}"
            RequestHeader set oidc_claim_user_id "expr=%{HTTP:OAUTH2_CLAIM_sub}"
            RequestHeader set oidc_access_token "expr=%{HTTP:OAUTH2_CLAIM_access_token}"
            RequestHeader set oidc_claim_expires_in "expr=%{HTTP:OAUTH2_CLAIM_exp}"

            ProxyPass ${PROXY_URL3}
            ProxyPassReverse ${PROXY_URL3}

            ${FILTER3}
        </Location>

        # Bigquery redirect logic.  Note: we are not authorizing the request since that is handled by the bigquery API
        # This is here to work around CORS rules that are enforced by the BigQuery APIs.  This makes it so that ours are
        # used instead.
        <Location /bigquery>
            ProxyPass https://bigquery.googleapis.com/bigquery
            ProxyPassReverse https://bigquery.googleapis.com/bigquery
        </Location>
    
        # Oauth proxying logic.  This allows sending unauthed oauth requests through to the back end
        <Location /oauth2>
            ProxyPass ${PROXY_URL}oauth2
            ProxyPassReverse ${PROXY_URL}oauth2
        </Location>
    </VirtualHost>

  oauth2conf: |-
    {{- range .Values.ingress.b2cMetadataEndpoints }}
    OAuth2TokenVerify metadata {{ . }} metadata.ssl_verify=true&verify.iat=skip
    {{- end}}
    OAuth2TokenVerify introspect http://127.0.0.1/introspect/ introspect.ssl_verify=false&verify.iat=skip

  {{- if .Values.tcell.enabled }}
  tcellconf: |-
    {
      "version": 1,
      "applications": [
        {
          "tcell_api_url": "https://us.agent.tcell.insight.rapid7.com/api/v1",
          "tcell_input_url": "https://us.input.tcell.insight.rapid7.com/api/v1",
          "js_agent_api_base_url": "https://us.agent.tcell.insight.rapid7.com/api/v1",
          "host_identifier":"{{ .Values.tcell.hostIdentifier }}",
          "logging_options":{"enabled":true,"level":"INFO","filename":"mytcell.log"}
        }
      ]
    }
  {{- end }}
  enableallowmethods: |-
    LoadModule allowmethods_module /usr/lib/apache2/modules/mod_allowmethods.so